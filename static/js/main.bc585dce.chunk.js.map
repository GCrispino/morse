{"version":3,"sources":["Utils/textToMorse.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["text2morseH","'","textToMorse","word","trim","replace","split","map","c","toUpperCase","join","marks","gap","hasSound","Dot","styled","motion","custom","Dash","Space","div","mult","audioCtx","window","AudioContext","sleep","ms","Promise","resolve","setTimeout","App","React","useState","text","setText","speed","setSpeed","pitch","setPitch","morse","setMorse","index","setIndex","setSound","playNotes","notes","defaultGap","defaultFrequency","seq","p","promises","Array","isArray","length","then","frequency","duration","cb","oscillator","createOscillator","type","value","connect","destination","a","start","stop","playNote","i","onFinishPlayingNote","useEffect","morseCode","y","char","variants","initial","charType","frac","height","width","marginRight","marginLeft","backgroundColor","highlight","base","className","disabled","onChange","e","target","onClick","alert","style","display","flexDirection","alignItems","justifyContent","m","key","animate","min","max","step","Number","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc585dce.chunk.js","sourcesContent":["const text2morseH = {\n    'A': \".-\",\n    'B': \"-...\",\n    'C': \"-.-.\",\n    'D': \"-..\",\n    'E': \".\",\n    'F': \"..-.\",\n    'G': \"--.\",\n    'H': \"....\",\n    'I': \"..\",\n    'J': \".---\",\n    'K': \"-.-\",\n    'L': \".-..\",\n    'M': \"--\",\n    'N': \"-.\",\n    'O': \"---\",\n    'P': \".--.\",\n    'Q': \"--.-\",\n    'R': \".-.\",\n    'S': \"...\",\n    'T': \"-\",\n    'U': \"..-\",\n    'V': \"...-\",\n    'W': \".--\",\n    'X': \"-..-\",\n    'Y': \"-.--\",\n    'Z': \"--..\",\n    '1': \".----\",\n    '2': \"..---\",\n    '3': \"...--\",\n    '4': \"....-\",\n    '5': \".....\",\n    '6': \"-....\",\n    '7': \"--...\",\n    '8': \"---..\",\n    '9': \"----.\",\n    '0': \"-----\",\n    '.': \".-.-.-\",\n    ',': \"--..--\",\n    ':': \"---...\",\n    '?': \"..--..\",\n    '\\'': \".----.\",\n    '-': \"-....-\",\n    '/': \"-..-.\",\n    '(': \"-.--.\",\n    ')': \"-.--.-\",\n    '\"': \".-..-.\",\n    '@': \".--.-.\",\n    '=': \"-...-\",\n    '&': \".-...\",\n    '+': \".-.-.\",\n    '!': \"-.-.--\",\n    ' ': \"/\"\n} as {\n    [key:string]: string;\n}\n\nexport const textToMorse = (word: string) => \n    word\n        .trim()\n        .replace(/\\s+/g, ' ')\n        .split('')\n        .map(c => text2morseH[c.toUpperCase()])\n        .join(' ');\n\n// short mark, dot or \"dit\" (▄▄▄▄): 1\n// longer mark, dash or \"dah\" (▄▄▄▄▄▄): 111\n// intra-character gap (between the dots and dashes within a character): 0\n// short gap (between letters): 000\n// medium gap (between words): 000 0 000 \nconst marks = {\n    '-': {gap: 3, hasSound: true },\n    '.': {gap: 1, hasSound: true },\n    ' ': {gap: 3, hasSound: false },\n    '/': {gap: 1, hasSound: false },\n    '*': {gap: 1, hasSound: false}\n} as {\n    [key:string]: {\n        gap: number,\n        hasSound: boolean\n    };\n}\n\nexport const morseToGap = (morseCode: string) => {\n    return morseCode\n        .split(' ')\n        .map(c =>\n            c\n            .split('')\n            .map((y, i) => i < c.length - 1 ? `${y}*` : y)\n            .join('')\n        )\n        .join(' ')\n        .split('')\n        .map(char => marks[char])\n}\n\nexport default textToMorse;","import React, { DetailsHTMLAttributes } from 'react';\nimport './App.css';\nimport {textToMorse, morseToGap} from './Utils/textToMorse';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\ntype CharType = 'dot' | 'dash';\n\nconst base = 4;\nconst bigB = 3;\n\nconst Dot =\n styled(\n  motion.custom('div')\n  )`\n   border-radius: 100%;\n `;\n\nconst Dash =\n styled(\n  motion.custom('div')\n  )``;\n\nconst Space = styled.div<{mult: number}>`\n  width: ${({ mult }) => mult * (base + 2)}px\n`;\n\n// create web audio api context\nconst audioCtx = new(window.AudioContext)();\n\nconst sleep = (ms: number) => \n  new Promise(resolve => setTimeout(resolve,ms));\n\nfunction playNote(frequency: number, duration: number, cb: () => void) {\n  // create Oscillator node\n  const oscillator = audioCtx.createOscillator();\n  oscillator.type = 'square';\n  oscillator.frequency.value = frequency; // value in hertz\n  oscillator.connect(audioCtx.destination);\n  return async () => {\n    oscillator.start();\n    await sleep(duration);\n    oscillator.stop();\n    cb();\n  }\n}\n\nconst seq = ([p, ...promises]: (() => Promise<void>)[]): Promise<void> => {\n  return Array.isArray(promises) && promises.length !== 0\n    ? p().then(() => seq(promises))\n    : p().then()\n}\n\nconst App: React.FC = () => {\n  const [text, setText] = React.useState('');\n  const [speed, setSpeed] = React.useState(100);\n  const [pitch, setPitch] = React.useState(150);\n  const [morse, setMorse] = React.useState('');\n  const [index, setIndex] = React.useState(0);\n  const [hasSound, setSound] = React.useState(false);\n\n  const onFinishPlayingNote = (hasSound: boolean, gap: number) => () => {\n    if (!hasSound && gap !== 3)\n      return ;\n\n    setIndex(i => i + 1);\n  };\n\n  const playNotes = (notes: {\n    gap: number,\n    hasSound: boolean\n  }[]) => {\n    const defaultGap = speed;\n    const defaultFrequency = pitch;\n  \n    const ps = notes.map(({ gap, hasSound }) => {\n      return playNote(\n        hasSound ? defaultFrequency : 0, defaultGap * gap,\n        onFinishPlayingNote(hasSound, gap)\n      )\n    });\n  \n    return seq(ps);\n  }\n  \n  React.useEffect(() => {\n    if (morse.length !== 0 && hasSound){\n      playNotes(morseToGap(morse)).then(() => {\n        setSound(false);\n        setIndex(0);\n      });\n    }\n  }, [morse, hasSound]);\n\n  const variants = {\n    initial: (charType: CharType) => {\n      const i = charType === 'dot' ? 1 : 4;\n      const frac = charType === 'dot' ? 1 : 2;\n      return {\n        height: base,\n        width: i * base,\n        marginRight: ((i * base * bigB / frac) - (i * base))/2,\n        marginLeft: ((i * base * bigB / frac) - (i * base))/2,\n        backgroundColor: 'black'\n      };\n    },\n    highlight: (charType: CharType) => {\n      const i = charType === 'dot' ? 1 : 4;\n      const frac = charType === 'dot' ? 1 : 2;\n      return {\n        height: base * bigB,\n        width: i * base * bigB / frac,\n        marginRight: 0,\n        marginLeft: 0,\n        backgroundColor: 'red'\n      };\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <input disabled={hasSound} value={text} onChange={e => {\n        setMorse(textToMorse(e.target.value))\n        setText(e.target.value)\n      }} />\n      <button onClick={() => {\n        if (text.length === 0) {\n          return alert('Digite algo');\n        } \n        \n        setSound(!hasSound)}}>Play</button>\n\n      <div style={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: 24\n      }}>\n        {\n          morse.split('').map((m, i) => \n            m === '.' \n              ? <Dot key={i} custom={'dot'} variants={variants} initial=\"initial\" animate={!hasSound ? 'initial' : index === i ? 'highlight' : 'initial'} />\n              : m === '-' \n                ? <Dash key={i} custom={'dash'} variants={variants} initial=\"initial\" animate={!hasSound ? 'initial' : index === i ? 'highlight' : 'initial'} />\n                : <Space mult={2} key={i} />\n            )\n        }\n      </div>\n      <div>\n        <p>speed: {speed}</p>\n        <input type=\"range\" min={50} max={300} step={50} disabled={hasSound} value={speed} onChange={e => \n          setSpeed(Number(e.target.value))\n        }/>\n      </div>\n      <div>\n        <p>pitch: {pitch}</p>\n        <input type=\"range\" min={50} max={500} step={10} disabled={hasSound} value={pitch} onChange={e => \n          setPitch(Number(e.target.value))\n        } />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}